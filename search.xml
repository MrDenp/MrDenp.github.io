<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[compatibility 工作中遇到的一些兼容问题]]></title>
    <url>%2F2018%2F06%2F15%2Fcompatibility%2F</url>
    <content type="text"><![CDATA[兼容IOS new Date() 在ios中不识别 2018-06-14 中的‘-’，只识别‘/’，当时做项目的时候在模拟机上测试没有问题，安卓也没有问题，但是一上ios真机就bug了，很难受，最后还是alert() 出 new Date(2018-06-14 23:00:00) 的时候为 invalid date,这才发现问题。安卓]]></content>
      <categories>
        <category>前端兼容问题</category>
      </categories>
      <tags>
        <tag>ios兼容</tag>
        <tag>安卓兼容</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序 从零开始了解微信小程序的开发（二）]]></title>
    <url>%2F2018%2F06%2F14%2FWeChatSmallProgram1%2F</url>
    <content type="text"></content>
      <categories>
        <category>微信</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>实战项目</tag>
        <tag>展示类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FrontEndResources 资源积累]]></title>
    <url>%2F2018%2F06%2F12%2FFrontEndResources%2F</url>
    <content type="text"><![CDATA[一组资源分享开发类前端库 实现打字机的效果 💎工具框架构建部署后端设计类色彩 非常好用的渐变色网站 WebGradients.com 💎 ColorDrop - New colors 免费的图片资源网站-PEXELS规范其他类]]></content>
      <categories>
        <category>资源积累</category>
      </categories>
      <tags>
        <tag>色彩搭配</tag>
        <tag>开发库资源</tag>
        <tag>开发组件资源</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拉一个节约开发时间的库和资源]]></title>
    <url>%2F2018%2F06%2F08%2F%E6%8B%89%E4%B8%80%E4%B8%AA%E8%8A%82%E7%BA%A6%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%B4%E7%9A%84%E5%BA%93%E5%92%8C%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[JavaScript 库Particles.js 在网页上创建炫酷的漂浮例子的库，在网站首页比较常见。 Three.js 在网页上创建 3D 对象和空间的库，常用于网页游戏。 Fullpage.js 轻松创建全屏滚动的网页。 Typed.js 实现打字机的效果。 Waypoints.js 实现滚动一个元素触发一个函数的最简单的方式。 Highlight.js 自动检测语言及高亮语法。 Chart.js 纯 JavaScript 实现炫酷图表。 Instantclick 大大提升网页加载效率，在鼠标悬停时预加载资源。 Chartist 另一个图表库。 Motio 实现基于 sprite 的动画和平移效果的库。 Animstion css 动画页面切换效果的 JQuery 插件 Barba.js 流畅和平滑的页面过渡效果。 TwentyTwenty 一个视觉差异工具，突出两个图像之间的差异。 Vivus.js 用于在 SVG 上绘制动画的库。 Wow.js 滚动时显示动画。 Scrolline.js 显示页面的滚动进度条。 Velocity.js 快速、平滑的 JavaScript 动画。 Animate on scroll 另一个滚动显示动画的库。 Handlebars.js —— JavaScript 模版。 jInvertScroll —— 轻量级的水平视差插件。 One page scroll —— 与 FullPage 类似。 Parallax.js —— 视觉引擎，对智能设备的方向做出反应。 Typeahead.js —— 自动匹配搜索。 Dragdealer.js —— 相当酷的实现拖动效果的库。 Bounce.js —— 创建炫酷的 CSS3 动画。 Pagepiling.js —— 又一个 one page scroll. Multiscroll.js —— 实现多列滚动面板效果。 Favico.js —— 动态图标。 Midnight.js —— 无缝切换固定标题。 Anime.js —— 动画库。 Keycode —— 获得按键的 JavaScript 键码。 Sortable —— 拖动排序控件。 Flexdatalist —— 输入补全。 Slideout.js —— 在网页上实现抽屉效果的侧边导航栏。 Jquerymy —— 使用 jquery 的两种数据绑定方式。 Cleave.js —— 格式化输入内容。 Page —— 小型客户端路由库。 Selectize.js —— 用于添加标签的选择框。 Nice select —— 用于创建奈斯型选择框。 Tether —— 可以有效地固定绝对定位的元素。 Shepherd.js —— 实现指导用户使用应用的效果。 Tooltip —— 提示信息。 Select2 —— 丰富的自定义选择框。 IziToast —— 容易实现的 JS 通知。 IziModal —— 容易实现的 JS 弹窗。 CSS 库／设计类Animate.css —— 动画库。 Flat UI Colors —— 简单有效的颜色。 Material design lite —— 基于 Google 的 Material Design。 Materialui.co —— 许多 Material Design 框架的资源。 Colorrrs —— 随机颜色生成器。 Section separators —— CSS 分割线。 Topcoat —— 简单快速的 CSS 框架。 Create ken burns effect —— 使用 CSS 动画的 Ken Burns 效果。 DynCSS —— 为 CSS 添加函数，让它变成动态的。 Magic animations —— 人如其名。 CSSpin —— CSS 旋转控件集合。 Feather icons —— 图标。 Ion icons —— 图标。 Font awesome —— 图标。 Font generator —— 组合多种字体，生成一个混合体。 On/Off switch —— 开关按钮。 UI Kit —— 轻型的模块化框架。 Bootstrap —— 这个就不谈了。 Foundation —— 号称最先进的响应式前端框架。]]></content>
      <categories>
        <category>节约开发时间成本的资源清单</category>
      </categories>
      <tags>
        <tag>js库</tag>
        <tag>css 库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AMD - 异步模块定义]]></title>
    <url>%2F2018%2F06%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[AMD 是”Asynchronous Module Definition”的缩写,意思就是”异步模块定义“.它采用异步方式加载模块,模块的加载不会影响它后面程序语句的运行.所有依赖这个模块的语句,都定义在一个回调函数中,等到加载完成之后这个回调函数才会运行. AMD如何加载模块 AMD 也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：1require([module], callback); 第一个参数[module],是一个数组，数组元素就是需要依赖的加载模块,第二个参数是一个回调函数,这个回调函数在第一个参数中的模块加载成功之后才会执行.例如123require([&apos;math&apos;],function(math)&#123; math.add(2,3);&#125;) 注意 此时math.add()与math模块加载不是同步的,浏览器不会发生请求数据时的假死状态. require.js 之前文件中一次加载很多js文件的写法有很大的缺点,加载的时候,浏览器会停止网页渲染,所以加载的文件越多,网页失去响应的时间就会越长,由于js文件之间存在依赖关系,因此在依赖关系复杂的时候代码的而编写就会变得很困难. require JS 的诞生主要解决了两个问题 实现js文件的异步加载,避免网页失去响应; 管理模块之间的依赖性,便于代码的编写和维护; require.js 的加载 两种引入方式： 1.在文件头部引入时需要异步加载并且如要兼容IE则需要加defer 1&lt;script src=&quot;js/require.js&quot; defer async=&quot;true&quot; &gt;&lt;/script&gt; 2.在页面底部引入 引入require.js后就需要引入自己的js文件了 1&lt;script src=&quot;js/require.js&quot; data-main=&quot;js/main&quot;&gt;&lt;/script&gt; data-main 属性的作用是,指定网页程序的主模块.main.js会被require加载,由于require 默认的文件后缀是js,所以可以把main.js写成main1234567891011121314151617require.config(&#123; baseUrl: &quot;js/lib&quot;,//指定js加载的基目录 paths: &#123; &quot;jquery&quot;: &quot;jquery.min&quot;, &quot;underscore&quot;: &quot;underscore.min&quot;, &quot;backbone&quot;: &quot;backbone.min&quot; &#125;， shim:&#123;//这个属性是专门用来配置不兼容的模块1exports暴露出去的变量名称，deps数组表明该模块的依赖 &apos;jquery.scroll&apos;:&#123; deps:[&apos;jquery&apos;], exports:&apos;jQuery.fn.scroll&apos; &#125; &#125;&#125;);require([&apos;jquery&apos;,&apos;uderscore&apos;,&apos;backbone&apos;],function($,_,Backbone)&#123; &#125;)]]></content>
      <categories>
        <category>模块化</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>异步</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序 从零开始了解微信小程序的开发（一）]]></title>
    <url>%2F2018%2F06%2F06%2FWeChatSmallProgram%2F</url>
    <content type="text"><![CDATA[摘要：记录这个一是帮助更多从零开始的开发小白可以通俗易懂的了解小程序开发，另外一个目的就是对小程序开发从零开始总结梳理一下，帮助别人的同时提升自己。（ps - 在总结中成长，不论是任何行业都适用的一句真言。） 微信小程序框架部分目录结构 pages index index.wxml index.wxss index.js logs app.js app.json app.wxss 配置 app.json pages 接受一个数组，每一项都是字符串，来指定小程序由哪些页面组成。每一项代表对应页面的【路径+文件名】信息，数组的第一项代表小程序的初始页面。小程序中新增/减少页面，都需要对 pages 数组进行修改。 123456&#123; &quot;pages&quot;:[ &quot;pages/index/index&quot;, &quot;pages/logs/logs&quot; ]&#125; window 1234567891011&#123; &quot;window&quot;:&#123; &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;navigationBarTextStyle&quot;: &quot;black&quot;, &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;, &quot;backgroundColor&quot;: &quot;#eeeeee&quot;, &quot;backgroundTextStyle&quot;: &quot;light&quot;, &quot;navigationStyle&quot;: &quot;custom&quot;, &quot;enablePullDownRefresh&quot;: false &#125;&#125; tabBar 如果小程序是一个多 tab 应用（客户端窗口的底部或顶部有 tab 栏可以切换页面），可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。 注意：当设置 position 为 top 时，将不会显示 icon，list是一个数组，该数组最少配置2个tab，最多5个tab，tab按照数组的顺序进行排列。 1234567891011121314151617&#123; &quot;tabBar&quot;:&#123; &quot;position&quot;:&quot;bottom&quot;, &quot;borderStyle&quot;:&quot;black&quot;, &quot;color&quot;:&quot;#FFF&quot;, &quot;selectedColor&quot;:&quot;#333&quot;, &quot;list&quot;:[ &#123; &quot;text&quot;:&quot;首页&quot;, &quot;pagePath&quot;:&quot;pages/index/index&quot;, &quot;iconPath&quot;:&quot;/static/images/index.png&quot;, &quot;selectedIconPath&quot;:&quot;/static/images/index.png&quot; &#125;, ], &quot;backgroundColor&quot;:&quot;#efefef&quot; &#125;&#125; networkTimeout 可以设置各种网络请求的超时时间。 12345678&#123; &quot;networkTimeout&quot;:&#123; &quot;request&quot;: 6000, &quot;connectSocket&quot;: 6000, &quot;uploadFile&quot;: 6000, &quot;downloadFile&quot;: 6000, &#125;&#125; page.json 每一个小程序页面也可以使用.json文件来对本页面的窗口表现进行配置。 页面的配置比app.json全局配置简单得多，只是设置 app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。 12345678910&#123; &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;, &quot;navigationBarTextStyle&quot;: &quot;black&quot;, &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;, &quot;backgroundColor&quot;: &quot;#eeeeee&quot;, &quot;backgroundTextStyle&quot;: &quot;light&quot;, &quot;enablePullDownRefresh&quot;: false, &quot;disableScroll&quot;: false,//true 设置页面整体不能上下滚动，仅设置在page.json &quot;onReachBottomDistance&quot;: 50 &#125; 框架逻辑层注册程序 APP() 函数用来注册一个小程序。接收一个object参数。 1234567891011121314App(&#123; onlaunch()&#123; //监听一个小程序的初始化，全局只触发一次 `生命周期函数` &#125;， onShow()&#123; //监听一个小程序的页面显示的 `生命周期函数` &#125;, onHide()&#123; //监听一个小程序的页面隐藏的 `生命周期函数` &#125;, onPageNotFound()&#123; //监听一个小程序的页面不存在的 `生命周期函数` &#125;&#125;) 场景值|场景值|说明| |:-------:|:---:| |1001|发现栏小程序主入口| |1005|顶部搜索框的搜索结果页| |1006|发现栏小程序主入口搜索框的搜索结果页| |1007|单人聊天会话中的小程序消息卡片| |1008|群聊会话中的小程序消息卡片| |1011|扫描二维码| |1012|长按图片识别二维码| |1013|手机相册选取二维码| |1014|小程序模版消息| |1017|前往体验版的入口页| |1019|微信钱包| |1020|公众号 profile 页相关小程序列表| |1022|聊天顶部置顶小程序入口| |1023|安卓系统桌面图标| |1024|小程序 profile 页| |1025|扫描一维码| |1026|附近小程序列表| |1027|顶部搜索框搜索结果页“使用过的小程序”列表| |1028|我的卡包| |1031|长按图片识别一维码| |1032|手机相册选取一维码| |1036|App 分享消息卡片| |1044|带 shareTicket 的小程序消息卡片（详情)| |1047|扫描小程序码| |1089|微信聊天主界面下拉| |1090|长按小程序右上角菜单唤出最近使用历史| 注册页面 Page() 函数用来注册一个页面。接受一个 object 参数，其指定页面的初始数据、生命周期函数、事件处理函数等。 onShareAppMessage() : 用户转发 只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮 用户点击转发按钮的时候会调用 此事件需要 return 一个 Object，用于自定义转发内容 Object自定义转发字段 title 转发标题 默认当前小程序的名称path 转发路径 默认当前页面path，必须是以/开头的完整路径 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556Page(&#123;//data 将会以 JSON 的形式由逻辑层传至渲染层，所以其数据必须是可以转成 JSON 的格式：字符串，数字，布尔值，对象，数组。 data: &#123; text: &quot;This is page data.&quot; &#125;, onLoad: function(options) &#123; // Do some initialize when page load.页面加载 &#125;, onReady: function() &#123; // Do something when page ready.页面初次渲染完成 &#125;, onShow: function() &#123; // Do something when page show.页面显示 &#125;, onHide: function() &#123; // Do something when page hide.页面隐藏 &#125;, onUnload: function() &#123; // Do something when page close.页面卸载 &#125;, onPullDownRefresh: function() &#123; // Do something when pull down.监听用户下拉动作 &#125;, onReachBottom: function() &#123; // Do something when page reach bottom.页面上拉触底事件的处理函数 &#125;, onShareAppMessage: function () &#123; // return custom share data when user share.用户点击右上角转发 return &#123; title: &apos;自定义转发标题&apos;, path: &apos;/page/user?id=123&apos; &#125; &#125;, onPageScroll: function() &#123; // Do something when page scroll.页面滚动触发事件的处理函数 &#125;, onTabItemTap(item) &#123; //当前是 tab 页时，点击 tab 时触发 //item : &#123; // index:&apos;&apos;, // pagePath:&apos;&apos;, // text:&apos;&apos; // &#125; &#125;, // Event handler. viewTap: function() &#123; this.setData(&#123; text: &apos;Set some data for updating view.&apos; &#125;, function() &#123; // this is setData callback &#125;) &#125;, customData: &#123; hi: &apos;MINA&apos; &#125;&#125;) 页面路由 小程序的页面路由是以栈的形式构建 123456当页面打开时页面栈形成，小程序首页入栈 | 栈的长度+1当打开新页面时，新页面入栈 | 栈的长度++ 直到栈的长度为5 * 第一个栈元素 为 首页栈页面重定向时，当前页面出栈，新页面入栈 | 栈的长度不变 页面返回时，页面不断出栈，直到目标返回页 | 栈的长度-- 直到栈的长度为1 Tab 切换时，页面全部出栈，只留下新的 Tab 页面 | 栈的长度重置 重加载时，页面全部出栈，只留下新的页面 | 栈的长度重置 Tip: navigateTo,redirectTo 只能打开非 tabBar 页面。 switchTab 只能打开 tabBar 页面。 reLaunch 可以打开任意页面。 调用页面路由带的参数可以在目标页面的onLoad中获取。 模块化文件作用域 在 JavaScript 文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。 全局函数 getApp() 可以获取全局的应用实例模块化 可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 module.exports 或者 exports 才能对外暴露接口。 推荐开发者采用 module.exports 来暴露模块接口 12345678// common.jsfunction sayHello(name) &#123; console.log(`Hello $&#123;name&#125; !`)&#125;function sayGoodbye(name) &#123; console.log(`Goodbye $&#123;name&#125; !`)&#125;module.exports.sayHello = sayHello 在需要使用这些模块的文件中，使用 require(path) 将公共代码引入,暂时不支持绝对路径 12345678910111213141516171819 var common = require(&apos;common.js&apos;) Page(&#123; helloMINA: function() &#123; common.sayHello(&apos;MINA&apos;) &#125;, goodbyeMINA: function() &#123; common.sayGoodbye(&apos;MINA&apos;) &#125; &#125;)``` #### 视图层##### wxml###### 数据绑定 这个就不详细介绍了，vue的绑定方式 &#123;&#123;&#125;&#125;组件属性(需要在双引号之内) ```html &lt;view id=&quot;item-&#123;&#123;id&#125;&#125;&quot;&gt; &lt;/view&gt; 列表渲染wx:for 在组件上使用 wx:for 控制属性绑定一个数组，即可使用数组中各项的数据重复渲染该组件。 默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item wx:key 字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。 保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字 注意 花括号和引号之间如果有空格，将最终被解析成为字符串 条件渲染&gt; 对比 `wx-if` 与 `hidden` `wx:if` 有更高的切换消耗 `hidden` 有更高的初始渲染消耗 因此，如果需要频繁切换的情景下，用 `hidden` 更好，如果在运行时条件不大可能改变则 `wx:if` 较好。 事件 事件绑定和冒泡 bind 事件绑定不会阻止冒泡事件向上冒泡，catch 事件绑定可以阻止冒泡事件向上冒泡。 事件的捕获阶段 需要在捕获阶段监听事件时，可以采用capture-bind、capture-catch关键字，后者将中断捕获阶段和取消冒泡阶段。 引用 import include include 可以将目标文件除了 &lt;template/&gt; &lt;wxs/&gt; 外的整个代码引入，相当于是拷贝到 include 位置]]></content>
      <categories>
        <category>微信</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>项目目录结构</tag>
        <tag>项目配置</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何去理解 区块链]]></title>
    <url>%2F2018%2F05%2F29%2Fblockchain%2F</url>
    <content type="text"><![CDATA[什么是区块链]]></content>
      <tags>
        <tag>区块链</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
